<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.spaceMapper">
	<insert id="spaceReg" parameterType="spacesVO" useGeneratedKeys="true" keyProperty="idx">
	
		insert into spaces (
			type,
			name,
			address,
			<if test="addressDetail != null">
				addressdetail,
			</if>
			addr1,
			<if test="addr2 != null">
				addr2,
			</if>
			info,
			facility,
			caution,
			capacity,
			cost,
			<if test="thumb != null">
				thumb,
			</if>
			hostidx
		) values (
			#{type},
			#{name},
			#{address},
			<if test="addressDetail != null">
				#{addressDetail},
			</if>
			#{addr1},
			<if test="addr2 != null">
				#{addr2},
			</if>
			#{info},
			#{facility},
			#{caution},
			#{capacity},
			#{cost},
			<if test="thumb != null">
				#{thumb},
			</if>
			#{hostIdx}
		)
	</insert>
	
	<update id="update" parameterType="spacesVO">
		update spaces set
		
			<if test="thumb != null and thumb != ''">
				thumb = #{thumb},
			</if>
			<if test="thumb == null or thumb == ''">
				thumb = '',
			</if>
			type = #{type},
			name = #{name},
			address = #{address},
			<if test="addressDetail != null and addressDetail != ''">
				addressdetail = #{addressDetail},
			</if>
			<if test="addressDetail == null or addressDetail == ''">
				addressdetail = '',
			</if>
			addr1 = #{addr1},
			<if test="addr2 != null and addr2 != ''">
				addr2 = #{addr2},
			</if>
			<if test="addr2 == null or addr2 == ''">
				addr2 = '',
			</if>
			info = #{info},
			facility = #{facility},
			caution = #{caution},
			capacity = #{capacity},
			cost = #{cost}
		
		where idx = #{idx}
	</update>
	
	<insert id="insertSpacePictures" parameterType="spacePicturesVO">
		insert into space_pictures (
			spaceidx,
			src,
			thumbsrc
		) values (
			#{spaceIdx},
			#{src},
			#{thumbSrc}
		)
	</insert>
	
	<delete id="deleteSpacePictrues" parameterType="spacesVO">
		delete from space_pictures
		where spaceidx = #{idx}
	</delete>
	
	<select id="getLocations" resultType="locationsVO">
		select * from locations order by addr1, addr2
	</select>
	
	<select id="getSpaceList" resultType="spacesVO" parameterType="spacesVO">
		select s.idx,
					 s.type,
					 s.name,
					 s.address,
					 s.addressdetail,
					 s.addr1,
					 s.addr2,
					 s.info,
					 s.facility,
					 s.caution,
					 s.capacity,
					 s.cost,
					 s.regdate,
					 s.hostidx,
					 hm.nickname as hostnickname,
					 s.status,
					 s.thumb
		from spaces s
		inner join host_members hm
		on s.hostidx = hm.midx
		where status != 3
			<if test="hostIdx != 0">
			and hostidx = #{hostIdx}
			</if>
	</select>
	
	<select id="details" resultType="spacesVO" parameterType="spacesVO">
		select idx,
					 type,
					 name,
					 address,
					 addressdetail,
					 addr1,
					 addr2,
					 info,
					 facility,
					 caution,
					 capacity,
					 cost,
					 regdate,
					 hostidx,
					 status,
					 thumb
		from spaces
		where idx = #{idx}
	</select>
	
	<select id="spacePictureList" resultType="spacePicturesVO" parameterType="spacesVO">
		select pictureidx,
					 spaceidx,
					 src,
					 thumbsrc
		from space_pictures
		where spaceidx = #{idx}
	</select>
	
	<update id="delete" parameterType="spacesVO">
		update spaces set status = 3 where idx = #{idx}
	</update>
	
	<select id="likedSpacesList" parameterType="spacesVO" resultType="likedSpacesVO">
		select spaceidx, midx
		from liked_spaces
		where spaceidx = #{idx}
	</select>
	
	<select id="getLikedStatus" parameterType="likedSpacesVO" resultType="int">
		select count(*) from liked_spaces
		where spaceidx = #{spaceIdx} and midx = #{mIdx}
	</select>
	
	<insert id="likeSpace" parameterType="likedSpacesVO">
		insert into liked_spaces (
			spaceidx,
			midx
		) values (
			#{spaceIdx},
			#{mIdx}
		)
	</insert>
	
	<delete id="unlikeSpace" parameterType="likedSpacesVO">
		delete from liked_spaces
		where spaceidx = #{spaceIdx} and midx = #{mIdx}
	</delete>
	
	<update id="acceptSpace" parameterType="spacesVO">
		update spaces
		set status = 1
		where idx = #{idx}
	</update>
	
	<update id="refuseSpace" parameterType="spacesVO">
		update spaces
		set status = 2
		where idx = #{idx}
	</update>
	
	<update id="requestAccept" parameterType="spacesVO">
		update spaces
		set status = 0
		where idx = #{idx}
	</update>
	
	<select id="spaceList" resultType="spacesVO" parameterType="HashMap">
		select * from (
			select a.*, count(ls.spaceidx) as liked from (
				select s.*, 
					count(sr.score) as reviewCnt, 
					avg(sr.score) as reviewAvg
				from space_review sr right join spaces s 
				on sr.spaceidx = s.idx group by s.idx
				) a left join (select * from liked_spaces where midx = #{likedMidx}) ls
			on a.idx = ls.spaceidx
			group by a.idx
		) aa 
		where status = 1
		
		<if test="vo != null">
			
			<if test="vo.addr1 != null and vo.addr1 != ''">
			and addr1 = #{vo.addr1}
			</if>
			<if test="vo.addr2 != null and vo.addr2 != ''">
			and addr2 = #{vo.addr2}
			</if>
			<if test="vo.type != null and vo.type != ''">
			and type = #{vo.type}
			</if>
			<if test="vo.name != null and vo.name != ''">
			and name like concat('%', #{vo.name}, '%')
			</if>
			
		</if>
		<if test="liked == 1">
		and liked = 1
		</if>
		
		<if test="orderType == 'review'">
			order by reviewCnt desc		
		</if>
		<if test="orderType == 'score'">
			order by reviewAvg desc
		</if>
		limit #{start}, 12
	</select>
	
	<select id="spaceReviewCntAvg" parameterType="spacesVO" resultType="Map">
		select spaceidx, count(score) as count, avg(score) as avg from space_review where spaceidx = #{idx} group by spaceidx 
	</select>
	
	<select id="spaceReviewList" parameterType="hashmap" resultType="spaceReviewVO">
		select gm.profilesrc,
					 sr.residx,
					 sr.spaceidx,
					 sr.picturesrc,
					 sr.thumbsrc,
					 sr.score,
					 sr.midx,
					 sr.mnickname,
					 sr.content,
					 sr.regdate
		from general_members gm, space_review sr
		where spaceidx = #{spacesVO.idx}
		and gm.midx = sr.midx
		<if test="orderType == 'regDateDesc'">
			order by regdate desc
		</if>
		<if test="orderType == 'scoreAsc'">
			order by score
		</if>
		<if test="orderType == 'scoreDesc'">
			order by score desc
		</if>
		limit #{start}, 5
	</select>
	
	<!-- 테스트용 -->
	<select id="getAddr1" resultType="String">
		select distinct addr1 from locations;
	</select>
	
	<select id="getAddr2" parameterType="locationsVO" resultType="String">
		select addr2 from locations where addr1 = #{addr1}
	</select>
	
	<select id="validateRsv" parameterType="reservationsVO" resultType="int">
		select count(*) from reservations
		where startdate = #{startDate}
		and enddate = #{endDate}
		and spaceidx = #{spaceIdx}
		and rsvstatus = 0
	</select>
	
	<insert id="insertRsv" parameterType="reservationsVO" useGeneratedKeys="true" keyProperty="resIdx">
		insert into reservations(
			midx,
			spaceidx,
			peoplenum,
			startdate,
			enddate,
			rsvhours,
			cost,
			usedpoint,
			totalcost
		) values (
			#{mIdx},
			#{spaceIdx},
			#{peopleNum},
			#{startDate},
			#{endDate},
			#{rsvHours},
			#{cost},
			#{usedPoint},
			#{totalCost}
		)
	</insert>
	
	<insert id="insertPoint" parameterType="pointsVO">
		insert into points (
			residx,
			midx,
			content,
			amount,
			balance
		) values (
			#{resIdx},
			#{mIdx},
			#{content},
			#{amount},
			#{balance}
		)
	</insert>
	
	<select id="getRSV" parameterType="reservationsVO" resultType="reservationsVO">
		select
			s.type, 
			s.name, 
			s.address, 
			s.addressdetail, 
			s.hostidx, 
			s.thumb, 
			r.* 
			from spaces s, reservations r 
			where s.idx = r.spaceidx
			and residx = #{resIdx}
	</select>
	
	<select id="getRsvFullDates" parameterType="hashmap" resultType="String">
		select date from (
			select date(startdate) as date, sum(rsvhours) as rsvhours
			from reservations
			where spaceidx = #{spaceIdx} and date(startdate) between #{nowDate} and #{afterMonth}
			and rsvstatus = 0
			group by date
			) a	where a.rsvhours = 15;
	</select>
	
	<select id="getRsvHours" parameterType="Map" resultType="Map">
		select startDate, endDate from reservations
		where spaceidx = #{spaceIdx} and date(startdate) = #{date}
		and rsvstatus = 0
	</select>
	
	<select id="getCurrentRsv" parameterType="generalMembersVO" resultType="reservationsVO">
		select 
			a.residx, 
			a.midx, 
			a.spaceidx, 
			a.peoplenum, 
			a.startdate, 
			a.enddate, 
			a.rsvhours, 
			a.resdate,
			a.rsvstatus, 
			b.idx,
			b.type, 
			b.name, 
			b.address, 
			b.addressDetail,
			b.addr1, 
			b.addr2, 
			b.thumb 
		from reservations a, spaces b
		where a.enddate <![CDATA[>=]]> now()
		and a.spaceidx = b.idx
		and a.midx = #{mIdx}
		and a.rsvstatus = 0
		order by startdate;
	</select>
	
	<select id="countPastRsv" parameterType="hashmap" resultType="int">
		select count(*)
		from reservations a, spaces b
		where a.spaceidx = b.idx
		and a.midx = #{mIdx}
		<if test="start != null and start != ''">
			<if test="dateType == 'resDate'">
				<if test="end == null or end == ''">
					and date(a.resdate) = #{start}
					order by resdate
				</if>
				<if test="end != null and end != ''">
					and date(a.resdate) <![CDATA[>=]]> #{start}
					and date(a.resdate) <![CDATA[<=]]> #{end}
					order by resdate
				</if>
			</if>
			<if test="dateType == 'startDate'">
				<if test="end == null or end == ''">
					and date(a.startdate) = #{start}
					order by startdate
				</if>
				<if test="end != null and end != ''">
					and date(a.startdate) <![CDATA[>=]]> #{start}
					and date(a.startdate) <![CDATA[<=]]> #{end}
					order by startdate
				</if>
			</if>
		</if>
	</select>
	
	<select id="getPastRsv" parameterType="hashmap" resultType="reservationsVO">
		select
			a.residx,
			a.midx,
			a.spaceidx,
			a.peoplenum,
			a.startdate,
			a.enddate,
			a.rsvhours,
			a.resdate,
			a.cost,
			a.usedPoint,
			a.totalCost,
			a.rsvStatus,
			b.idx,
			b.type, 
			b.name, 
			b.address, 
			b.addressDetail,
			b.addr1, 
			b.addr2, 
			b.thumb 
		from reservations a, spaces b
		where a.spaceidx = b.idx
		and a.midx = #{mIdx}
		<if test="start == null or start == ''">
			order by resdate desc
		</if>
		<if test="start != null and start != ''">
			<if test="dateType == 'resDate'">
				<if test="end == null or end == ''">
					and date(a.resdate) = #{start}
					order by resdate desc
				</if>
				<if test="end != null and end != ''">
					and date(a.resdate) <![CDATA[>=]]> #{start}
					and date(a.resdate) <![CDATA[<=]]> #{end}
					order by resdate desc
				</if>
			</if>
			<if test="dateType == 'startDate'">
				<if test="end == null or end == ''">
					and date(a.startdate) = #{start}
					order by startdate desc
				</if>
				<if test="end != null and end != ''">
					and date(a.startdate) <![CDATA[>=]]> #{start}
					and date(a.startdate) <![CDATA[<=]]> #{end}
					order by startdate desc
				</if>
			</if>
		</if>
		limit #{startRow}, 10;
	</select>
	
	<select id="isReviewExist" parameterType="reservationsVO" resultType="int">
		select count(*) from space_review
		where residx = #{resIdx}
	</select>
	
	<insert id="insertReview" parameterType="spaceReviewVO">
		insert into space_review (
			residx,
			spaceidx,
			<if test="pictureSrc != null">
				picturesrc,
				thumbsrc,
			</if>
			score,
			midx,
			mnickname,
			content
		) values (
			#{resIdx},
			#{spaceIdx},
			<if test="pictureSrc != null">
				#{pictureSrc},
				#{thumbSrc},
			</if>
			#{score},
			#{mIdx},
			#{mNickname},
			#{content}
		)
	</insert>
	
	<select id="getReviewInfo" parameterType="spaceReviewVO" resultType="spaceReviewVO">
		select * from space_review
		where resIdx = #{resIdx}
	</select>
	
	<delete id="deleteReview" parameterType="spaceReviewVO">
		delete from space_review
		where resIdx = #{resIdx}
	</delete>
	
	<update id="updateReview" parameterType="spaceReviewVO">
		update space_review set
			picturesrc = #{pictureSrc},
			thumbsrc = #{thumbSrc},
			score = #{score},
			content = #{content}
		where residx = #{resIdx}
	</update>
	
	<insert id="insertQnaQ" parameterType="spaceQnaVO">
		insert into space_qna (
			spaceidx,
			midx,
			mnickname,
			content,
			publicyn
		) values (
			#{spaceIdx},
			#{mIdx},
			#{mNickname},
			#{content},
			#{publicYN}
		)
	</insert>
	
	<select id="countQna" parameterType="spacesVO" resultType="int">
		select count(*) from space_qna
		where spaceidx = #{idx}
	</select>
	
	<select id="qnaList" parameterType="hashMap" resultType="spaceQnaVO">
		select gm.profileSrc, sq.* from general_members gm, space_qna sq
		where gm.midx = sq.midx
		and spaceidx = #{spacesVO.idx}
		order by regDate desc
		limit #{start}, 5
	</select>
	
	<update id="updateQnaA" parameterType="spaceQnaVO">
	 	update space_qna set
	 		answer = #{answer},
	 		answerdate = now()
	 	where qnaidx = #{qnaIdx}
	</update>
	
	<update id="deleteQnaA" parameterType="spaceQnaVO">
	 	update space_qna set
	 		answer = null,
	 		answerdate = null
	 	where qnaidx = #{qnaIdx}
	</update>
	
	<select id="qnaInfo" parameterType="spaceQnaVO" resultType="spaceQnaVO">
		select * from space_qna
		where qnaIdx = #{qnaIdx}
	</select>
	
	<delete id="deleteQna" parameterType="spaceQnaVO">
		delete from space_qna
		where qnaIdx = #{qnaIdx}
	</delete>
	
	<update id="updateQnaQ" parameterType="spaceQnaVO">
		update space_qna set
			content = #{content},
			publicyn = #{publicYN}
		where qnaidx = #{qnaIdx}
	</update>
	
	<select id="countRsvBySpace" parameterType="hashmap" resultType="int">
		select count(*)
		from reservations a, spaces b
		where a.spaceidx = b.idx
		and a.spaceidx = #{spaceIdx}
		<if test="start != null and start != ''">
			<if test="dateType == 'resDate'">
				<if test="end == null or end == ''">
					and date(a.resdate) = #{start}
					order by resdate
				</if>
				<if test="end != null and end != ''">
					and date(a.resdate) <![CDATA[>=]]> #{start}
					and date(a.resdate) <![CDATA[<=]]> #{end}
					order by resdate
				</if>
			</if>
			<if test="dateType == 'startDate'">
				<if test="end == null or end == ''">
					and date(a.startdate) = #{start}
					order by startdate
				</if>
				<if test="end != null and end != ''">
					and date(a.startdate) <![CDATA[>=]]> #{start}
					and date(a.startdate) <![CDATA[<=]]> #{end}
					order by startdate
				</if>
			</if>
		</if>
	</select>
	
	<select id="getRsvBySpace" parameterType="hashmap" resultType="reservationsVO">
		select
			a.residx,
			a.midx,
			a.spaceidx,
			a.peoplenum,
			a.startdate,
			a.enddate,
			a.rsvhours,
			a.resdate,
			a.cost,
			a.usedPoint,
			a.totalCost,
			a.rsvstatus,
			b.idx,
			b.type, 
			b.name, 
			b.address, 
			b.addressDetail,
			b.addr1, 
			b.addr2, 
			b.thumb 
		from reservations a, spaces b
		where a.spaceidx = b.idx
		and a.spaceidx = #{spaceIdx}
		<if test="start == null or start == ''">
			order by resdate desc
		</if>
		<if test="start != null and start != ''">
			<if test="dateType == 'resDate'">
				<if test="end == null or end == ''">
					and date(a.resdate) = #{start}
					order by resdate desc
				</if>
				<if test="end != null and end != ''">
					and date(a.resdate) <![CDATA[>=]]> #{start}
					and date(a.resdate) <![CDATA[<=]]> #{end}
					order by resdate desc
				</if>
			</if>
			<if test="dateType == 'startDate'">
				<if test="end == null or end == ''">
					and date(a.startdate) = #{start}
					order by startdate desc
				</if>
				<if test="end != null and end != ''">
					and date(a.startdate) <![CDATA[>=]]> #{start}
					and date(a.startdate) <![CDATA[<=]]> #{end}
					order by startdate desc
				</if>
			</if>
		</if>
		limit #{startRow}, 10
	</select>
	
	<select id="countPointHistory" parameterType="hashmap" resultType="int">
		select count(*) from points p
		inner join reservations r
		on p.resIdx = r.residx
		where p.midx = #{mIdx}
		<if test="start != null and start != ''">
			<if test="end == null or end == ''">
				and date(r.resdate) = #{start}
				order by resdate
			</if>
			<if test="end != null and end != ''">
				and date(r.resdate) <![CDATA[>=]]> #{start}
				and date(r.resdate) <![CDATA[<=]]> #{end}
				order by resdate
			</if>
		</if>
	</select>
	
	<select id="pointHistory" parameterType="hashmap" resultType="pointsVO">
		select p.*, r.resdate from points p
		inner join reservations r
		on p.resIdx = r.residx
		where p.midx = #{mIdx}
		<if test="start != null and start != ''">
			<if test="end == null or end == ''">
				and date(r.resdate) = #{start}
			</if>
			<if test="end != null and end != ''">
				and date(r.resdate) <![CDATA[>=]]> #{start}
				and date(r.resdate) <![CDATA[<=]]> #{end}
			</if>
		</if>
		order by pointidx desc
		limit #{startRow}, 10
	</select>
	
	<select id="pointInfo" parameterType="reservationsVO" resultType="pointsVO">
		select * from points where resIdx = #{resIdx}
	</select>
	
	<update id="cancelRsv" parameterType="reservationsVO">
		update reservations set
			rsvstatus = 1
		where resIdx = #{resIdx}
	</update>
	
	<select id="recentReview" resultType="spaceReviewVO">
		select sr.*, s.name as spaceName, gm.profilesrc 
		from space_review sr 
		inner join spaces s 
		on sr.spaceidx = s.idx 
		inner join general_members gm 
		on sr.midx = gm.midx 
		where sr.picturesrc != '' 
		order by sr.regdate desc 
		limit 10;
	</select>
	
	<select id="calculation" resultType="hashMap">
		select 
			r.spaceidx,
			s.type, 
			s.name, 
			s.thumb,
			count(r.residx) as count,
			sum(r.cost) as sum 
		from reservations r 
		inner join spaces s 
		on s.idx = r.spaceidx 
		where r.startdate like concat(#{date}, '%') 
		and r.rsvstatus = 0 
		and s.hostidx = #{hostIdx} 
		group by r.spaceidx;
	</select>
	
	<insert id="insertSettled" parameterType="settledVO">
		insert into settled (
			hostIdx, month
		) values (
			#{hostIdx}, #{month}
		)
	</insert>
	
	<select id="ifSettled" resultType="int" parameterType="settledVO">
		select count(*) from settled
		where hostIdx = #{hostIdx} and month = #{month}
	</select>
</mapper>