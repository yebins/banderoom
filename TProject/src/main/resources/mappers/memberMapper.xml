<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.memberMapper">
	<select id="isEmailKeyExist" resultType="int" parameterType="emailRegVO">
		select count(*) from emailreg
		where email = #{email}
	</select>
	
	<insert id="setEmailKey" parameterType="emailRegVO">
		insert into emailreg (
			email,
			regkey,
			deadline
		) values (
			#{email},
			#{regkey},
			(date_add(now(), interval 30 minute))
		)
	</insert>
	
	<update id="updateEmailKey" parameterType="emailRegVO">
		update emailreg set
			regkey = #{regkey},
			deadline = (date_add(now(), interval 30 minute))
			
		where email = #{email}
	</update>
	
	<select id="selectEmailReg" parameterType="emailRegVO" resultType="emailRegVO">
		select email, regkey, deadline
		from emailreg
		where email = #{email}
	</select>
	
	<select id="isEmailExist" resultType="int" parameterType="Map">
		select count(email) from 
		<if test="memberType == 'general'">
			general_members 
		</if>
		<if test="memberType == 'host'">
			host_members 
		</if>
		where email = #{email}
	</select>
	
	<select id="isNicknameExist" resultType="int" parameterType="Map">
		select count(nickname) from
		<if test="memberType == 'general'">
			general_members 
		</if>
		<if test="memberType == 'host'">
			host_members 
		</if>
		where nickname = #{nickname}
	</select>
	
	
	<select id="isTelKeyExist" resultType="int" parameterType="telRegVO">
		select count(*) from telreg
		where tel = #{tel}
	</select>
	
	<insert id="setTelKey" parameterType="telRegVO">
		insert into telreg (
			tel,
			regkey,
			deadline
		) values (
			#{tel},
			#{regkey},
			(date_add(now(), interval 5 minute))
		)
	</insert>
	
	<update id="updateTelKey" parameterType="telRegVO">
		update telreg set
			regkey = #{regkey},
			deadline = (date_add(now(), interval 5 minute))
			
		where tel = #{tel}
	</update>
	
	<select id="selectTelReg" parameterType="telRegVO" resultType="telRegVO">
		select tel, regkey, deadline
		from telreg
		where tel = #{tel}
	</select>
	
	<insert id="gjoin" parameterType="generalMembersVO">
		insert into general_members (
			email,
			password,
			name,
			nickname,
			address,
			<if test="addressDetail != null">
				addressdetail,
			</if>
			addr1,
			<if test="addr2 != null">
				addr2,
			</if>
			tel,
			profilesrc,
			gender,
			iskakao
		) values (
			#{email},
			#{password},
			#{name},
			#{nickname},
			#{address},
			<if test="addressDetail != null">
				#{addressDetail},
			</if>
			#{addr1},
			<if test="addr2 != null">
				#{addr2},
			</if>
			#{tel},
			#{profileSrc},
			#{gender},
			#{isKakao}
		)
	</insert>
	
	<select id="kakaoLogin" parameterType="generalMembersVO" resultType="generalMembersVO">
		select midx,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 point,
					 auth,
					 isKakao,
					 joinDate
		from general_members
		where email = #{email}
		and isKakao = 'Y'
		and auth != 2
	</select>
	
	<select id="gLogin" parameterType="generalMembersVO" resultType="generalMembersVO">
		select midx,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 point,
					 auth,
					 isKakao,
					 joinDate
		from general_members
		where email = #{email}
		and password = #{password}
		and isKakao = 'N'
		and auth != 2
	</select>
	
	<select id="isBrnExist" resultType="int" parameterType="String">
		select count(brn) from host_members where brn = #{brn}
	</select>
	
	
	<insert id="hjoin" parameterType="hostMembersVO">
		insert into host_members (
			brn,
			email,
			password,
			name,
			nickname,
			address,
			<if test="addressDetail != null">
				addressdetail,
			</if>
			addr1,
			<if test="addr2 != null">
				addr2,
			</if>
			tel,
			profilesrc,
			gender
		) values (
			#{brn},
			#{email},
			#{password},
			#{name},
			#{nickname},
			#{address},
			<if test="addressDetail != null">
				#{addressDetail},
			</if>
			#{addr1},
			<if test="addr2 != null">
				#{addr2},
			</if>
			#{tel},
			#{profileSrc},
			#{gender}
		)
	</insert>
	
	<select id="hLogin" parameterType="hostMembersVO" resultType="hostMembersVO">
		select midx,
					 brn,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 auth,
					 joinDate
		from host_members
		where brn = #{brn}
		and password = #{password}
		and auth != 2
	</select>
	
	<select id="oneMemberInfo" parameterType="generalMembersVO" resultType="generalMembersVO">
		select * from general_members where midx=#{mIdx}
	</select>
	<select id="hostMemberInfo" parameterType="generalMembersVO" resultType="hostMembersVO">
		select midx,
					 brn,
					 email,
					 name,
					 nickname,
					 address,
					 addressDetail,
					 addr1,
					 addr2,
					 tel,
					 profileSrc,
					 gender,
					 auth,
					 joinDate
		from host_members
		where midx=#{mIdx}
	</select>
	
	<insert id="sendMessage" parameterType="messagesVO">
		insert into messages(
			sender
			,senderType
			,receiver
			,receiverType
			,content
			,sentdate
			,status
		) values(
			#{sender}
			,#{senderType}
			,#{receiver}
			,#{receiverType}
			,#{content}
			,now()
			,0
		)
	</insert>
	
	<select id="listMessage" parameterType="map" resultType="messagesVO">
		select m.msgidx
			,m.sendertype
			,m.sender
			,
			case 
				when m.sendertype = 'general'
				then (select gm.nickname from general_members gm where gm.midx = m.sender )
				when m.sendertype = 'host'
				then (select hm.nickname from host_members hm where hm.midx = m.sender)
			end as senderNickname
			,m.receivertype
			,m.receiver
			, 
			case 
				when m.receivertype = 'general'
				then (select gm.nickname from general_members gm where gm.midx = m.receiver )
				when m.receivertype = 'host'
				then (select hm.nickname from host_members hm where hm.midx = m.receiver)
			end as receiverNickname
			,m.content
			,m.sentdate
			,m.status  
			from messages m
			<where>
			<if test="receiver != null and receiver != '' and receiverType != null">
			and m.receiver = #{receiver}
			and m.receiverType = #{receiverType}
			</if>
			<if test="sender != null and sender != '' and senderType != null">
			and m.sender = #{sender}
			and m.senderType = #{senderType}
			</if>
			</where>
			order by m.msgidx desc
			limit #{start},14
	</select>
	
	<delete id="deleteMsg" parameterType="map">
		delete from messages
		where msgIdx in
        <foreach item="idItem" collection="msgIdx" open="(" separator="," close=")">
		#{idItem}
		</foreach>
	</delete>
	
	<update id="readMsg" parameterType="messagesVO">
		update messages set status = 1 
		where msgIdx=#{msgIdx}
	</update>
	
	<select id="listCount" parameterType="map" resultType="map">
		select 
			pp.ct1,pp.ct2,kk.ct3 
		from (
			select rm.ct1 , sm.ct2 
		from
			(select count(m.msgidx) ct1 
		from messages m 
			where m.receivertype like CONCAT (#{receiverType}) and m.receiver = #{receiver}) as rm 
		join 
			(select count(m2.msgidx) ct2 from messages m2 where m2.sender= #{sender} and m2.sendertype like CONCAT (#{senderType})) as sm) pp
		join 
			(select count(m3.msgidx) ct3 from messages m3 where m3.sender = #{sender} and m3.senderType like CONCAT (#{senderType}) and receiver=#{receiver} and receiverType like CONCAT (#{receiverType})) kk;
	</select>
	
	<select id="noReadCount" parameterType="map" resultType="map">
	select 
		pp.ct1,pp.ct2,kk.ct3 
	from (
		select rm.ct1 , sm.ct2 
	from
		(select count(m.msgidx) ct1 
	from messages m 
		where m.receivertype = #{receiverType} and m.receiver = #{receiver} and m.status=0) as rm 
	join 
		(select count(m2.msgidx) ct2 from messages m2 where m2.sender=#{sender} and m2.sendertype =#{senderType} and m2.status=0) as sm) pp
	join 
		(select count(m3.msgidx) ct3 from messages m3 where m3.sender = #{sender} and m3.senderType =#{senderType} and receiver=#{receiver} and receiverType = #{receiverType} and m3.status=0) kk;
	</select>
	
	
	<select id="getHostMember" parameterType="hostMembersVO" resultType="hostMembersVO">
		select * from host_members where midx=#{mIdx}
	</select>
	
	<update id="setPoint" parameterType="pointsVO">
		update general_members set
			point = #{balance}
			where midx = #{mIdx}
	</update>
	
	<!-- 내 정보 업데이트 부분 -->
	<update id="ginfoUpdate" parameterType="generalMembersVO">
		update general_members set
			<if test="nickname != null">
			nickname = #{nickname},
			</if>
			<if test="profileSrc != null">
			profilesrc = #{profileSrc},
			</if>
			<if test="password != null">
				password = #{password},
			</if>
			addr1 = #{addr1},
			addr2 = #{addr2},
			address = #{address},
			addressDetail = #{addressDetail},
			name = #{name},
			gender = #{gender},
			tel = #{tel}
		where midx = #{mIdx}
	</update>
	
	<update id="hinfoUpdate" parameterType="hostMembersVO">
		update host_members set
			<if test="nickname != null">
			nickname = #{nickname},
			</if>
			<if test="profileSrc != null">
			profilesrc = #{profileSrc},
			</if>
			<if test="password != null">
				password = #{password},
			</if>
			email = #{email},
			addr1 = #{addr1},
			addr2 = #{addr2},
			address = #{address},
			addressDetail = #{addressDetail},
			name = #{name},
			gender = #{gender},
			tel = #{tel}
		where midx = #{mIdx}
	</update>
	
	<select id="selectCurrPw" parameterType="map" resultType="String">
		select password from
		<if test="memberType == 'general'">
			general_members 
		</if>
		<if test="memberType == 'host'">
			host_members 
		</if>
		where midx = #{mIdx}
	</select>
	<!-- 내 정보 업데이트 부분 -->
	
	<select id="selectGmemberByEmail" parameterType="generalMembersVO" resultType="generalMembersVO">
		select * from general_members where email = #{email}
	</select>
	
	<select id="isBrnAndEmailExist" parameterType="hostMembersVO" resultType="int">
		select count(*) from host_members
		where brn = #{brn} and email = #{email}
	</select>
	
	<select id="selectHmemberByBrn" parameterType="hostMembersVO" resultType="hostMembersVO">
		select * from host_members where brn = #{brn}
	</select>
	
	<!-- report -->
	<insert id="sendReport" parameterType="reportsVO">
		INSERT INTO reports(
			 reporter
			,reportername
			,target
			,targetname
			,content
		)VALUES(
			 #{reporter}
			,#{reportername}
			,#{target}
			,#{targetname}
			,#{content}
		)
	</insert>
	
	<select id="reportedMember" parameterType="hashMap" resultType="reportsVO">
		SELECT r.ridx
			 , r.target
			 , r.targetname
			 , r.reporter
			 , r.reportername
			 , r.repdate
			 , r.content
			 , b.reportcount
		  FROM reports r
		  left outer join 
			(select count(ridx) as 'reportcount', target
		   	   from reports
		      group by target) b
		    on r.target = b.target
		<if test="searchField == 'target'">
			WHERE r.targetname like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'reporter'">
			WHERE r.reportername like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'content'">
			WHERE r.content like concat('%',#{searchWord},'%')
		</if>
		<if test="sort == null">
			ORDER BY r.ridx desc
		</if>
		<if test="sort != null">
			<if test="sort == 'rIdx'">
				ORDER BY r.ridx desc
			</if>
			<if test="sort == 'reportCount'">
				ORDER BY b.reportcount desc, r.repdate desc
			</if>
		</if>
		 LIMIT #{start}, 10
	</select>
	
	<select id="reportListNum" parameterType="hashMap" resultType="int">
		select count(ridx)
		  FROM reports
		<if test="searchField == 'target'">
			WHERE targetname like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'reporter'">
			WHERE reportername like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'content'">
			WHERE content like concat('%',#{searchWord},'%')
		</if>
	</select>
	
	<select id="reportedDetail" parameterType="int" resultType="reportsVO">
		SELECT ridx, target, targetname, reportername, repdate, content
		  FROM reports
		 WHERE ridx = #{rIdx}
	</select>
	
	<update id="block" parameterType="int">
		UPDATE general_members SET auth = 1
		 WHERE midx = #{target}
	</update>
	
	<update id="unblock" parameterType="int">
		UPDATE general_members SET auth = 0
		 WHERE midx = #{target}
	</update>
	
	<update id="withdraw" parameterType="int">
		UPDATE general_members SET auth = 2
		 WHERE midx = #{target}
	</update>
	
	<delete id="deleteReport" parameterType="int">
		DELETE FROM reports WHERE ridx = #{rIdx}
	</delete>
	<!-- report -->
	
	<!-- 일반회원관리 -->
	<select id="gMember" parameterType="hashMap" resultType="generalMembersVO">
		select 
			  midx
			, email
			, name
			, nickname
			, address
			, addressdetail
			, addr1
			, addr2
			, tel
			, profilesrc
			, gender
			, point
			, auth
			, iskakao
			, joindate
		  FROM general_members
		  where auth != 2
		<if test="sort == 'all'">
			and auth != 2
		</if>
		<if test="sort == 'normal'">
			and auth = 0
		</if>
		<if test="sort == 'block'">
			and auth = 1
		</if>
		<if test="sort == 'admin'">
			and auth = 3
		</if>
		<if test="searchField == 'nickname'">
			and nickname like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'name'">
			and name like concat('%',#{searchWord},'%')
		</if>
		 order by midx desc
		 LIMIT #{start}, 10
	</select>
	
	<select id="gMemberNum" parameterType="hashMap" resultType="int">
		SELECT COUNT(midx)
		  FROM general_members
		 where auth != 2
		<if test="sort == 'all'">
			and auth != 2
		</if>
		<if test="sort == 'normal'">
			and auth = 0
		</if>
		<if test="sort == 'block'">
			and auth = 1
		</if>
		<if test="sort == 'admin'">
			and auth = 3
		</if>
		<if test="searchField == 'nickname'">
			and nickname like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'name'">
			and name like concat('%',#{searchWord},'%')
		</if>
	</select>
	
	<select id="hMember" parameterType="hashMap" resultType="hostMembersVO">
		SELECT 
			  midx
			, brn
			, email
			, name
			, nickname
			, address
			, addressdetail
			, addr1
			, addr2
			, tel
			, profilesrc
			, gender
			, auth
			, joindate
		 FROM host_members
		 where auth != 2
		<if test="searchField == 'nickname'">
			and nickname like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'name'">
			and name like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'brn'">
			and brn like concat('%',#{searchWord},'%')
		</if>
		order by midx desc
		LIMIT #{start}, 10
	</select>
	
	<select id="hMemberNum" parameterType="hashMap" resultType="int">
		SELECT COUNT(midx)
		  FROM host_members
		 where auth != 2
		<if test="searchField == 'nickname'">
			and nickname like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'name'">
			and name like concat('%',#{searchWord},'%')
		</if>
		<if test="searchField == 'brn'">
			and brn like concat('%',#{searchWord},'%')
		</if>
	</select>
	
	<!-- 일반회원관리 -->
	
	<update id="gUnregister" parameterType="generalMembersVO">
		update general_members set
			email = #{email},
			password = #{password},
			name = #{name},
			nickname = #{nickname},
			address = #{address},
			addressDetail = #{addressDetail},
			addr1 = #{addr1},
			addr2 = #{addr2},
			tel = #{tel},
			profilesrc = #{profileSrc},
			gender = #{gender},
			point = #{point},
			auth = #{auth},
			iskakao = #{isKakao}
		where midx = #{mIdx}
	</update>
	
	<update id="hUnregister" parameterType="hostMembersVO">
		update host_members set
			brn = #{brn},
			email = #{email},
			password = #{password},
			name = #{name},
			nickname = #{nickname},
			address = #{address},
			addressDetail = #{addressDetail},
			addr1 = #{addr1},
			addr2 = #{addr2},
			tel = #{tel},
			profilesrc = #{profileSrc},
			gender = #{gender},
			auth = #{auth}
		where midx = #{mIdx}
	</update>
	
	<update id="unregisterSpaces" parameterType="hostMembersVO">
		update spaces set
			status = 3
		where hostidx = #{mIdx}
	</update>
	
</mapper>